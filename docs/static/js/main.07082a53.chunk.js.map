{"version":3,"sources":["images/Rick.png","images/logo.png","components/Header.js","components/CharacterCard.js","components/CharacterList.js","components/Filter.js","services/getDataFromApi.js","components/CharacterDetail.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","CharacterCard","props","to","character","id","image","name","species","CharacterList","console","log","itemsList","characters","map","key","length","inputValue","Filter","previousFilter","type","placeholder","onChange","ev","handleFilter","value","target","getDataFromApi","fetch","then","response","json","data","results","status","origin","episodes","episode","sort","o1","o2","CharacterDetail","newStatus","handleGoHome","handleInput","undefined","Rick","onClick","class","App","useState","setCharacters","nameFilter","setNameFilter","useEffect","filteredCharacters","filter","toUpperCase","includes","goHome","exact","path","render","characterId","match","params","foundCharacter","find","parseInt","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,kC,wDCA3CD,EAAOC,QAAU,IAA0B,kC,8PCY5BC,G,MARA,WACb,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,cAAcC,IAAKC,IAAMC,IAAI,sBCenCC,G,MAjBO,SAACC,GAErB,OACE,4BACE,kBAAC,IAAD,CAAML,UAAU,sBAAsBM,GAAE,qBAAgBD,EAAME,UAAUC,KACtE,yBAAKR,UAAU,kBACb,yBAAKA,UAAU,kBAAkBC,IAAKI,EAAME,UAAUE,MAAON,IAAG,kBAAaE,EAAME,UAAUE,SAC7F,yBAAKT,UAAU,mBACb,wBAAIA,UAAU,kBAAkBK,EAAME,UAAUG,MAChD,2BAAIL,EAAME,UAAUI,eCQjBC,G,MAlBO,SAACP,GACrBQ,QAAQC,IAAIT,GAEZ,IAAMU,EAAYV,EAAMW,WAAWC,KAAI,SAACV,GACtC,OAAO,kBAAC,EAAD,CAAeW,IAAKX,EAAUC,GAAID,UAAWA,OAGtD,OAAyB,IAArBQ,EAAUI,OACL,wBAAInB,UAAU,0BAAd,8DAA8FK,EAAMe,YAI3G,yBAAKpB,UAAU,kBACb,wBAAIA,UAAU,cAAce,MCUnBM,G,MAtBA,SAAChB,GACdQ,QAAQC,IAAI,oBAAsBT,EAAMiB,gBASxC,OACE,yBAAKtB,UAAU,aACb,0BAAMA,UAAU,UACd,2BAAOA,UAAU,YAAYuB,KAAK,OAAOb,KAAK,OAAOF,GAAG,OAAOgB,YAAY,sBAAsBC,SAVlF,SAACC,GAEpBrB,EAAMsB,aAAa,CACjBC,MAAOF,EAAGG,OAAOD,MACjBV,IAAK,UAMsHU,MAAOvB,EAAMiB,iBACtI,4BAAQC,KAAK,SAASvB,UAAU,kBCMzB8B,EAzBQ,WACrB,OAAOC,MAAM,8CACVC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAgBL,OAboBA,EAAKC,QAAQnB,KAAI,SAACV,GAEpC,MAAO,CACLC,GAAID,EAAUC,GACdC,MAAOF,EAAUE,MACjBC,KAAMH,EAAUG,KAChBC,QAASJ,EAAUI,QACnB0B,OAAQ9B,EAAU8B,OAClBC,OAAQ/B,EAAU+B,OAAO5B,KACzB6B,SAAUhC,EAAUiC,QAAQrB,WAIXsB,MAAK,SAACC,EAAIC,GAAL,OAAaD,EAAGhC,KAAOiC,EAAGjC,KAAO,GAAK,S,iBC0EvDkC,G,YAtFS,SAACvC,GACvB,IAqBMwC,EArBAC,EAAe,WACnBjC,QAAQC,IAAI,cACZT,EAAM0C,YAAY1C,EAAMe,aAG1B,QAAwB4B,IAApB3C,EAAME,UAER,OADAM,QAAQC,IAAI,gBAEV,6BACE,kBAAC,IAAD,CAAMd,UAAU,UAAUM,GAAG,KAC3B,yBAAKN,UAAU,iBACb,8BACE,yBAAKA,UAAU,wBAAwBC,IAAKgD,IAAM9C,IAAI,cAAc+C,QAASJ,KAE/E,0BAAM9C,UAAU,sBAAhB,aAGJ,wBAAIA,UAAU,SAAd,8BAMF6C,EAD6B,UAA3BxC,EAAME,UAAU8B,OAEhB,0BAAMrC,UAAU,yBAAhB,SACQ,uBAAGA,UAAU,kBAGa,SAA3BK,EAAME,UAAU8B,OAEvB,0BAAMrC,UAAU,yBAAhB,QACO,uBAAGmD,MAAM,kBAKhB,0BAAMnD,UAAU,yBAAhB,UAEE,uBAAGA,UAAU,4BAMnB,IAAIW,EAC0B,UAA5BN,EAAME,UAAUI,QACd,0BAAMX,UAAU,yBAAhB,SACQ,uBAAGA,UAAU,kBACnB,uBAAGA,UAAU,iBAGf,0BAAMA,UAAU,yBAAhB,SACQ,uBAAGA,UAAU,yBAIzB,OACE,yBAAKA,UAAU,8BACb,kBAAC,IAAD,CAAMA,UAAU,UAAUM,GAAG,KAC3B,yBAAKN,UAAU,iBACb,8BACE,yBAAKA,UAAU,wBAAwBC,IAAKgD,IAAM9C,IAAI,cAAc+C,QAASJ,KAE/E,0BAAM9C,UAAU,sBAAhB,aAGJ,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,yBAAyBC,IAAKI,EAAME,UAAUE,MAAON,IAAG,kBAAaE,EAAME,UAAUE,SACpG,yBAAKT,UAAU,yBACb,4BAAQA,UAAU,oBAChB,wBAAIA,UAAU,yBAAyBK,EAAME,UAAUG,OAEzD,wBAAIV,UAAU,yBACZ,wBAAIA,UAAU,gBAAd,YAAuCW,GACvC,wBAAIX,UAAU,gBAAd,WAAsC6C,GACtC,wBAAI7C,UAAU,gBAAd,WAAsCK,EAAME,UAAU+B,QACtD,wBAAItC,UAAU,gBAAd,aAAwCK,EAAME,UAAUgC,gBClBvDa,EAxDH,WAAO,IAAD,EACoBC,mBAAS,IAD7B,mBACTrC,EADS,KACGsC,EADH,OAEoBD,mBAAS,IAF7B,mBAETE,EAFS,KAEGC,EAFH,KAIhBC,qBAAU,WACR5C,QAAQC,IAAI,qBACZgB,IAAiBE,MAAK,SAACG,GAAD,OAAUmB,EAAcnB,QAC7C,IAGH,IAQMuB,EAAqB1C,EAAW2C,QAAO,SAACpD,GAC5C,OAAOA,EAAUG,KAAKkD,cAAcC,SAASN,EAAWK,kBAkBpDE,EAAS,SAACxC,GACdT,QAAQC,IAAR,yBAA8BQ,IAC9BkC,EAAclC,IAGhB,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+D,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CAAQrC,aArCK,SAACQ,GACpBtB,QAAQC,IAAI,wBAAyBqB,GACpB,SAAbA,EAAKjB,KACPsC,EAAcrB,EAAKP,QAkCqBN,eAAgBiC,IACpD,kBAAC,EAAD,CAAevC,WAAY0C,EAAoBtC,WAAYmC,KAE7D,kBAAC,IAAD,CAAOS,KAAK,iBAAiBC,OA5BL,SAAC5D,GAC7B,IAAM6D,EAAc7D,EAAM8D,MAAMC,OAAO5D,GAEjC6D,EAAiBrD,EAAWsD,MAAK,SAAC/D,GAEtC,OAAOgE,SAASL,KAAiB3D,EAAUC,MAG7C,YAAuBwC,IAAnBqB,EACK,kBAAC,EAAD,CAAiBtB,YAAae,EAAQvD,UAAW8D,EAAgBjD,WAAYmC,IAE7E,kBAAC,EAAD,YC/BOiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASR,MACvB,2DCXNS,IAASX,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAGFY,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxE,QAAQwE,MAAMA,EAAMC,c","file":"static/js/main.07082a53.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Rick.a85a1968.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.75509f2e.png\";","import React from 'react';\nimport logo from '../images/logo.png';\nimport '../stylesheets/Header.scss';\n\nconst Header = () => {\n  return (\n    <div className='header'>\n      <img className='header-logo' src={logo} alt='Rick and Morty'></img>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../stylesheets/CharacterCard.scss';\n// import '../stylesheets/App.scss';\n\nconst CharacterCard = (props) => {\n  // console.log(props.character.id);\n  return (\n    <li>\n      <Link className='character-card-link' to={`/character/${props.character.id}`}>\n        <div className='character-card'>\n          <img className='character-image' src={props.character.image} alt={`Foto de ${props.character.image}`}></img>\n          <div className='character-title'>\n            <h2 className='character-name'>{props.character.name}</h2>\n            <p>{props.character.species}</p>\n          </div>\n        </div>\n      </Link>\n    </li>\n  );\n};\n\nexport default CharacterCard;\n","import React from 'react';\nimport CharacterCard from './CharacterCard';\nimport '../stylesheets/CharacterList.scss';\n\nconst CharacterList = (props) => {\n  console.log(props);\n\n  const itemsList = props.characters.map((character) => {\n    return <CharacterCard key={character.id} character={character} />;\n  });\n\n  if (itemsList.length === 0) {\n    return <h1 className='character-list-message'> No hay ninguÃÅn personaje que coincida con la palabra {props.inputValue}</h1>;\n  }\n\n  return (\n    <div className='character-list'>\n      <ul className='items-list'>{itemsList}</ul>\n    </div>\n  );\n};\n\nexport default CharacterList;\n","import React from 'react';\n\nimport '../stylesheets/CharacterCard.scss';\nimport '../stylesheets/Filter.scss';\n\nconst Filter = (props) => {\n  console.log('previousFilter = ' + props.previousFilter);\n\n  const handleChange = (ev) => {\n    // console.log(ev.target.value);\n    props.handleFilter({\n      value: ev.target.value,\n      key: 'name',\n    });\n  };\n  return (\n    <div className='searchBar'>\n      <form className='search'>\n        <input className='searchbox' type='text' name='name' id='name' placeholder='Enter the character' onChange={handleChange} value={props.previousFilter}></input>\n        <button type='submit' className='searchbtn'>\n          {/* <i className='fas fa-search'></i> */}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Filter;\n","const getDataFromApi = () => {\n  return fetch('https://rickandmortyapi.com/api/character/')\n    .then((response) => response.json())\n    .then((data) => {\n      // console.log(data.results);\n\n      let characterList = data.results.map((character) => {\n        // console.log(character.origin.name);\n        return {\n          id: character.id,\n          image: character.image,\n          name: character.name,\n          species: character.species,\n          status: character.status,\n          origin: character.origin.name,\n          episodes: character.episode.length,\n        };\n      });\n\n      return characterList.sort((o1, o2) => (o1.name > o2.name ? 1 : -1));\n\n      // return characterList.sort((o1, o2) => (o1.episodes < o2.episodes ? 1 : -1));\n    });\n};\n\nexport default getDataFromApi;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Rick from '../images/Rick.png';\n\nimport '../stylesheets/CharacterDetail.scss';\nimport '../stylesheets/App.scss';\n\nconst CharacterDetail = (props) => {\n  const handleGoHome = () => {\n    console.log('going home');\n    props.handleInput(props.inputValue);\n  };\n\n  if (props.character === undefined) {\n    console.log('es undefined');\n    return (\n      <div>\n        <Link className='go-back' to='/'>\n          <div className='header-return'>\n            <span>\n              <img className='character-detail-icon' src={Rick} alt='return-icon' onClick={handleGoHome}></img>\n            </span>\n            <span className='header-return-text'>Go Back</span>\n          </div>\n        </Link>\n        <h1 className='error'>El personaje no existe :(</h1>\n      </div>\n    );\n  } else {\n    let newStatus;\n    if (props.character.status === 'Alive') {\n      newStatus = (\n        <span className='character-detail-span'>\n          Alive <i className='far fa-smile'></i>\n        </span>\n      );\n    } else if (props.character.status === 'Dead') {\n      newStatus = (\n        <span className='character-detail-span'>\n          Dead <i class='fas fa-skull'></i>\n        </span>\n      );\n    } else {\n      newStatus = (\n        <span className='character-detail-span'>\n          Unknown\n          <i className='far fa-question-circle'></i>\n        </span>\n      );\n    }\n\n    // let species = props.character.status === 'Alive' ? <Emoji symbol='üôÇ' label='alive' /> : props.character.status === 'Death' ? <Emoji symbol='üíÄ' label='death' /> : <Emoji symbol='?' label='unknown' />;\n    let species =\n      props.character.species === 'Human' ? (\n        <span className='character-detail-span'>\n          Human <i className='fas fa-female'></i>\n          <i className='fas fa-male'></i>\n        </span>\n      ) : (\n        <span className='character-detail-span'>\n          Alien <i className='fab fa-reddit-alien'></i>\n        </span>\n      );\n\n    return (\n      <div className='character-detail-container'>\n        <Link className='go-back' to='/'>\n          <div className='header-return'>\n            <span>\n              <img className='character-detail-icon' src={Rick} alt='return-icon' onClick={handleGoHome}></img>\n            </span>\n            <span className='header-return-text'>Go Back</span>\n          </div>\n        </Link>\n        <div className='character-detail-card'>\n          <img className='character-detail-image' src={props.character.image} alt={`Foto de ${props.character.image}`}></img>\n          <div className='character-detail-text'>\n            <header className='character-header'>\n              <h2 className='character-detail-name'>{props.character.name}</h2>\n            </header>\n            <ul className='character-description'>\n              <li className='character-li'>Species: {species}</li>\n              <li className='character-li'>Status: {newStatus}</li>\n              <li className='character-li'>Origin: {props.character.origin}</li>\n              <li className='character-li'>Episodes: {props.character.episodes}</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default CharacterDetail;\n","import React, { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Header from './Header';\nimport CharacterList from './CharacterList';\nimport Filter from './Filter';\nimport getDataFromApi from '../services/getDataFromApi';\nimport CharacterDetail from './CharacterDetail';\n\nimport '../stylesheets/App.scss';\n\nconst App = () => {\n  const [characters, setCharacters] = useState([]);\n  const [nameFilter, setNameFilter] = useState('');\n\n  useEffect(() => {\n    console.log('me estoy montando');\n    getDataFromApi().then((data) => setCharacters(data));\n  }, []);\n  // console.log(characters);\n\n  const handleFilter = (data) => {\n    console.log('manejando los filtros', data);\n    if (data.key === 'name') {\n      setNameFilter(data.value);\n    }\n  };\n  // console.log('Name:', nameFilter);\n\n  const filteredCharacters = characters.filter((character) => {\n    return character.name.toUpperCase().includes(nameFilter.toUpperCase());\n  });\n\n  const renderCharacterDetail = (props) => {\n    const characterId = props.match.params.id;\n\n    const foundCharacter = characters.find((character) => {\n      // console.log(`characterId=${characterId}  characted.id=${character.id} son iguales?-> ${parseInt(characterId) === parseInt(character.id)}`);\n      return parseInt(characterId) === character.id;\n    });\n    // console.log(foundCharacter);\n    if (foundCharacter !== undefined) {\n      return <CharacterDetail handleInput={goHome} character={foundCharacter} inputValue={nameFilter} />;\n    } else {\n      return <CharacterDetail />;\n    }\n  };\n\n  const goHome = (previousFilter) => {\n    console.log(`filtro inicial:${previousFilter}`);\n    setNameFilter(previousFilter);\n  };\n\n  return (\n    <div className='App'>\n      <Header />\n      <Switch>\n        <Route exact path='/'>\n          <Filter handleFilter={handleFilter} previousFilter={nameFilter} />\n          <CharacterList characters={filteredCharacters} inputValue={nameFilter} />\n        </Route>\n        <Route path='/character/:id' render={renderCharacterDetail}></Route>\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { HashRouter } from 'react-router-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}